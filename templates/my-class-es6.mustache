/* TODO: remove this eslint fixes below */
/* eslint-disable dot-notation */
/* eslint-disable padded-blocks */
/* eslint-disable eol-last */
/* eslint-disable max-len */
/* eslint-disable class-methods-use-this */
/* eslint-disable no-param-reassign */
/* eslint-disable prefer-const */
/* eslint-disable no-self-compare */
/* eslint-disable no-constant-condition */
/* eslint-disable no-trailing-spaces */

/**
 * {{&description}}
 * @class {{&className}}
 * @param {(string|object)} [domainOrOptions] - The project domain or options object. If object, see the object's optional properties.
 * @param {string} [domainOrOptions.baseURL] - The project domain + base URL
 * @param {object} [domainOrOptions.token] - auth token - object with value property and optional headerOrQueryName and isQuery properties
 */
export default class {{&className}} {
	constructor(props) {
		const { externals = {}, baseURL = '{{&baseURL}}'{{#isSecure}}, token{{/isSecure}}} = props;
		{{#isSecure}}
		this.token = token;
		{{/isSecure}}
		this.externals = externals;
		this.baseURL = baseURL;
		if (!this.baseURL) {
			throw new Error('baseURL parameter must be specified as a string.');
		}
	}

	reject(message) {
		return Promise.reject(message);
	}

	rejectMissingRequired(paramType, camelCaseName) {
		return this.reject(`Missing required ${paramType} parameter: ${camelCaseName}`);
	}

	getExternal(parameter) {
		if (!!this.externals && !!this.externals[parameter]) {
			return this.externals[parameter]();
		}

		return undefined;
	}


	request(config) {
		return window.axios({
			baseURL: this.baseURL,
			...config
		});
	}

	{{#methods}}
		{{> method}}
	{{/methods}}
}
