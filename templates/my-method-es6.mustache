/**
 * {{&summary}}
 * @method
 * @name {{&className}}#{{&methodName}}
{{#parameters}}
{{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
 *
 */
{{&methodName}}(parameters = {}) {
	const form = {};
	{{#isBodyParameter}}let body;{{/isBodyParameter}}
	{{#headers}}const headers = {};{{/headers}}

	{{#isSecure}}
		if (this.token.headerOrQueryName) {
			headers[this.token.headerOrQueryName] = this.token.value;
		} else {
			headers['Authorization'] = 'Bearer ' + this.token.value;
		}
	{{/isSecure}}

	{{#headers}}
		headers['{{&name}}'] = [{{&value}}];
	{{/headers}}

	{{#isBodyParameter}}
	if(parameters['{{&camelCaseName}}'] !== undefined){
		body = parameters['{{&camelCaseName}}'];
	}
	{{/isBodyParameter}}

	{{#parameters}}
	{{#required}}
	if(parameters['{{&camelCaseName}}'] === undefined){
		return this.rejectMissingRequired('{{&paramType}}', '{{&camelCaseName}}');
	}
	{{/required}}
	form['{{&name}}'] = parameters['{{&camelCaseName}}'];
	{{/parameters}}

	return this.request({
		method: '{{method}}',
		url: '{{&path}}',
		params: form,
		{{#headers}}headers,{{/headers}}
		{{#isBodyParameter}}data: body,{{/isBodyParameter}}
	});
}
